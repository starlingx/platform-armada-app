From c30981ae7f7a231e0d302b552a416f7f6048b204 Mon Sep 17 00:00:00 2001
From: Felipe Sanches Zanoni <Felipe.SanchesZanoni@windriver.com>
Date: Mon, 10 Apr 2023 13:59:10 -0300
Subject: [PATCH] ceph-csi-rbd: add storage-init.yaml

Signed-off-by: Hediberto Cavalcante da Silva <hediberto.cavalcantedasilva@windriver.com>
Signed-off-by: Felipe Sanches Zanoni <Felipe.SanchesZanoni@windriver.com>
Signed-off-by: Erickson Silva <Erickson.SilvadeOliveira@windriver.com>
---
 .../ceph-csi-rbd/templates/storage-init.yaml  | 379 ++++++++++++++++++
 1 file changed, 379 insertions(+)
 create mode 100644 charts/ceph-csi-rbd/templates/storage-init.yaml

diff --git a/charts/ceph-csi-rbd/templates/storage-init.yaml b/charts/ceph-csi-rbd/templates/storage-init.yaml
new file mode 100644
index 0000000..365b475
--- /dev/null
+++ b/charts/ceph-csi-rbd/templates/storage-init.yaml
@@ -0,0 +1,379 @@
+{{/*
+#
+# Copyright (c) 2020-2023 Wind River Systems, Inc.
+#
+# SPDX-License-Identifier: Apache-2.0
+#
+*/}}
+
+kind: ClusterRole
+apiVersion: rbac.authorization.k8s.io/v1
+metadata:
+  name: rbd-rbac-secrets-namespaces
+  labels:
+    app: {{ include "ceph-csi-rbd.name" . }}
+    chart: {{ include "ceph-csi-rbd.chart" . }}
+    component: {{ .Values.provisioner.name }}
+    release: {{ .Release.Name }}
+    heritage: {{ .Release.Service }}
+  annotations:
+    "meta.helm.sh/release-name": {{ .Release.Name }}
+    "meta.helm.sh/release-namespace": {{ .Release.Namespace }}
+    "helm.sh/hook": "pre-upgrade, pre-install"
+    "helm.sh/hook-delete-policy": "before-hook-creation"
+rules:
+  - apiGroups: [""]
+    resources: ["secrets"]
+    verbs: ["get", "list", "watch", "create", "delete"]
+  - apiGroups: [""]
+    resources: ["namespaces"]
+    verbs: ["get", "create", "list", "update"]
+
+---
+
+kind: ClusterRoleBinding
+apiVersion: rbac.authorization.k8s.io/v1
+metadata:
+  name: rbd-rbac-secrets-namespaces
+  labels:
+    app: {{ include "ceph-csi-rbd.name" . }}
+    chart: {{ include "ceph-csi-rbd.chart" . }}
+    component: {{ .Values.provisioner.name }}
+    release: {{ .Release.Name }}
+    heritage: {{ .Release.Service }}
+  annotations:
+    "meta.helm.sh/release-name": {{ .Release.Name }}
+    "meta.helm.sh/release-namespace": {{ .Release.Namespace }}
+    "helm.sh/hook": "pre-upgrade, pre-install"
+    "helm.sh/hook-delete-policy": "before-hook-creation"
+subjects:
+  - kind: ServiceAccount
+    name: {{ include "ceph-csi-rbd.serviceAccountName.provisioner" . }}
+    namespace: {{ .Release.Namespace }}
+roleRef:
+  kind: ClusterRole
+  name: rbd-rbac-secrets-namespaces
+  apiGroup: rbac.authorization.k8s.io
+
+---
+
+apiVersion: v1
+kind: ConfigMap
+metadata:
+  name: rbd-storage-init
+  namespace: {{ .Release.Namespace }}
+  labels:
+    app: {{ include "ceph-csi-rbd.name" . }}
+    chart: {{ include "ceph-csi-rbd.chart" . }}
+    component: {{ .Values.provisioner.name }}
+    release: {{ .Release.Name }}
+    heritage: {{ .Release.Service }}
+  annotations:
+    "meta.helm.sh/release-name": {{ .Release.Name }}
+    "meta.helm.sh/release-namespace": {{ .Release.Namespace }}
+    "helm.sh/hook": "pre-upgrade, pre-install"
+    "helm.sh/hook-delete-policy": "before-hook-creation"
+data:
+  ceph.conf: |
+    #
+    # Copyright (c) 2020-2022 Wind River Systems, Inc.
+    #
+    # SPDX-License-Identifier: Apache-2.0
+    #
+
+    [global]
+      # For version 0.55 and beyond, you must explicitly enable
+      # or disable authentication with "auth" entries in [global].
+      auth_cluster_required = none
+      auth_service_required = none
+      auth_client_required = none
+
+    {{ $monitors := .Values.classdefaults.monitors }}
+    {{ range $index, $monitor := $monitors}}
+    [mon.{{- $index }}]
+    mon_addr = {{ $monitor }}
+    {{- end }}
+
+  storage-init.sh: |
+    #! /bin/bash
+
+    #
+    # Copyright (c) 2020-2023 Wind River Systems, Inc.
+    #
+    # SPDX-License-Identifier: Apache-2.0
+    #
+
+    # Copy from read only mount to Ceph config folder
+    cp /tmp/ceph.conf /etc/ceph/
+
+    touch /etc/ceph/ceph.client.admin.keyring
+
+    # Check if ceph is accessible
+    echo "================================================="
+    echo "ceph -s"
+    echo "================================================="
+    ceph -s
+    RETURN_CODE=$?
+    if [ ${RETURN_CODE} -ne 0 ]; then
+      echo -e "Error: Ceph cluster is not accessible, check Pod logs for details. (return code: ${RETURN_CODE})"
+      exit ${RETURN_CODE}
+    fi
+
+    echo -e "================================================="
+    echo "Creating admin secret"
+    echo "================================================="
+    if [ -n "${CEPH_ADMIN_SECRET}" ]; then
+      # check if the secret exists or is an old pattern, if not create a new one.
+      kubectl describe secret -n "${NAMESPACE}" "${CEPH_ADMIN_SECRET}" 2>/dev/null | grep -qE "^userID"
+      if [ $? -ne 0 ]; then
+        kubectl get secret -n "${NAMESPACE}" "${CEPH_ADMIN_SECRET}" &>/dev/null
+        if [ $? -eq 0 ]; then
+          echo "- Deleting old ${CEPH_ADMIN_SECRET} secret for namespace ${NAMESPACE} ${CEPH_ADMIN_SECRET}:"
+          kubectl delete secret -n "${NAMESPACE}" "${CEPH_ADMIN_SECRET}"
+          RETURN_CODE=$?
+          if [ ${RETURN_CODE} -ne 0 ]; then
+            echo "Error deleting secret ${CEPH_ADMIN_SECRET} for namespace ${NAMESPACE} (return code: ${RETURN_CODE})"
+            exit ${RETURN_CODE}
+          fi
+        fi
+        echo "- Creating ${CEPH_ADMIN_SECRET} secret for namespace ${NAMESPACE}:"
+        ADMIN_KEYRING=$(echo NoPassword | base64)
+        kubectl create secret generic -n "${NAMESPACE}" "${CEPH_ADMIN_SECRET}" --from-literal=userKey="${ADMIN_KEYRING}" --from-literal=userID="${ADMIN_ID}"
+        RETURN_CODE=$?
+        if [ ${RETURN_CODE} -ne 0 ]; then
+          echo "Error creating secret ${CEPH_ADMIN_SECRET} for namespace ${NAMESPACE} (return code: ${RETURN_CODE})"
+          exit ${RETURN_CODE}
+        fi
+      else
+        echo "Secret ${CEPH_ADMIN_SECRET} for namespace ${NAMESPACE} already exists"
+      fi
+    else
+      echo "Secret ${CEPH_ADMIN_SECRET} for namespace ${NAMESPACE} already exists"
+    fi
+
+    echo -e "\n================================================="
+    echo "Setting pool configuration"
+    echo "================================================="
+
+    echo "- Checking pool..."
+    ceph osd pool stats "${POOL_NAME}" &>/dev/null
+    if [ $? -ne 0 ]; then
+      echo "- Creating pool ${POOL_NAME}:"
+      ceph osd pool create "${POOL_NAME}" "${POOL_CHUNK_SIZE}"
+      RETURN_CODE=$?
+      if [ ${RETURN_CODE} -ne 0 ]; then
+        echo "Error creating pool ${POOL_NAME} (return code: ${RETURN_CODE})"
+        exit ${RETURN_CODE}
+      fi
+    else
+      echo "Pool ${POOL_NAME} already exists"
+    fi
+
+    echo "- Enabling pool ${POOL_NAME}:"
+    ceph osd pool application enable "${POOL_NAME}" rbd
+    RETURN_CODE=$?
+    if [ ${RETURN_CODE} -ne 0 ]; then
+      echo "Error enabling pool ${POOL_NAME} (return code: ${RETURN_CODE})"
+      exit ${RETURN_CODE}
+    fi
+
+    echo "- Setting the number of replicas:"
+    ceph osd pool set "${POOL_NAME}" size "${POOL_REPLICATION}"
+    RETURN_CODE=$?
+    if [ ${RETURN_CODE} -ne 0 ]; then
+      echo "Error setting the number of pool replicas (return code: ${RETURN_CODE})"
+      exit ${RETURN_CODE}
+    fi
+
+    echo "- Assigning crush rule:"
+    ceph osd pool set "${POOL_NAME}" crush_rule "${POOL_CRUSH_RULE_NAME}"
+    RETURN_CODE=$?
+    if [ ${RETURN_CODE} -ne 0 ]; then
+      echo "Error assigning crush rule (return code: ${RETURN_CODE})"
+      exit ${RETURN_CODE}
+    fi
+
+    if [ -n "${USER_ID}" ]; then
+      echo -e "\n================================================="
+      echo "Creating keyring"
+      echo "================================================="
+      KEYRING=$(ceph auth get-or-create client."${USER_ID}" mon "allow r" osd "allow rwx pool=""${POOL_NAME}""" | sed -n 's/^[[:blank:]]*key[[:blank:]]\+=[[:blank:]]\(.*\)/\1/p')
+      # Set up pool key in Ceph format
+      CEPH_USER_KEYRING=/etc/ceph/ceph.client."${USER_ID}".keyring
+      echo "${KEYRING}" > "${CEPH_USER_KEYRING}"
+      echo "Keyring ${CEPH_USER_KEYRING} created"
+    fi
+
+    if [ -n "${CEPH_USER_SECRET}" ]; then
+      echo -e "\n================================================="
+      echo "Creating user secret"
+      echo "================================================="
+      # check if the secret exists or is an old pattern, if not create a new one.
+      kubectl describe secret -n "${NAMESPACE}" "${CEPH_USER_SECRET}" 2>/dev/null | grep -qE "^userID"
+      if [ $? -ne 0 ]; then
+        kubectl get secret -n "${NAMESPACE}" "${CEPH_USER_SECRET}" &>/dev/null
+        if [ $? -eq 0 ]; then
+          echo "- Deleting old ${CEPH_USER_SECRET} secret for namespace ${NAMESPACE}:"
+          kubectl delete secret -n "${NAMESPACE}" "${CEPH_USER_SECRET}"
+          RETURN_CODE=$?
+          if [ ${RETURN_CODE} -ne 0 ]; then
+            echo "Error deleting secret ${CEPH_USER_SECRET} for namespace ${NAMESPACE} (return code: ${RETURN_CODE})"
+            exit ${RETURN_CODE}
+          fi
+        fi
+        echo "- Creating ${CEPH_USER_SECRET} secret for namespace ${NAMESPACE}:"
+        kubectl create secret generic -n "${NAMESPACE}" "${CEPH_USER_SECRET}" --type="kubernetes.io/rbd" --from-literal=userKey="${KEYRING}" --from-literal=userID="${USER_ID}"
+        RETURN_CODE=$?
+        if [ ${RETURN_CODE} -ne 0 ]; then
+          echo "Error creating secret ${CEPH_USER_SECRET} for namespace ${NAMESPACE} (return code: ${RETURN_CODE})"
+          exit ${RETURN_CODE}
+        fi
+      else
+        echo "Secret ${CEPH_USER_SECRET} for namespace ${NAMESPACE} already exists"
+      fi
+
+      echo -e "\n================================================="
+      echo "Creating secrets for additional namespaces"
+      echo "================================================="
+      # Support creating namespaces and Ceph user secrets for additional
+      # namespaces other than that which the provisioner is installed. This
+      # allows the provisioner to set up and provide PVs for multiple
+      # applications across many namespaces.
+      if [ -n "${ADDITIONAL_NAMESPACES}" ]; then
+        for ns in $(IFS=,; echo ${ADDITIONAL_NAMESPACES}); do
+          kubectl get namespace "${ns}" &>/dev/null
+          if [ $? -ne 0 ]; then
+            kubectl create namespace "${ns}"
+            RETURN_CODE=$?
+            if [ ${RETURN_CODE} -ne 0 ]; then
+              echo "Error creating namespace ${ns} but continuing anyway (return code: ${RETURN_CODE})"
+              continue
+            fi
+          fi
+
+          # check if the secret exists or is an old pattern, if not create a new one.
+          kubectl describe secret -n "${ns}" "${CEPH_USER_SECRET}" 2>/dev/null | grep -qE "^userID"
+          if [ $? -ne 0 ]; then
+            kubectl get secret -n "${ns}" "${CEPH_USER_SECRET}" &>/dev/null
+            if [ $? -eq 0 ]; then
+              echo "- Deleting old ${CEPH_USER_SECRET} secret for namespace ${ns}:"
+              kubectl delete secret -n "${ns}" "${CEPH_USER_SECRET}"
+              RETURN_CODE=$?
+              if [ ${RETURN_CODE} -ne 0 ]; then
+                echo "Error deleting secret ${CEPH_USER_SECRET} for namespace ${ns} (return code: ${RETURN_CODE})"
+                exit ${RETURN_CODE}
+              fi
+            fi
+            echo "- Creating secret ${CEPH_USER_SECRET} for namespace ${ns}:"
+            kubectl create secret generic -n "${ns}" "${CEPH_USER_SECRET}" --type="kubernetes.io/rbd" --from-literal=userKey="${KEYRING}" --from-literal=userID="${USER_ID}"
+            RETURN_CODE=$?
+            if [ ${RETURN_CODE} -ne 0 ]; then
+              echo "Error creating secret ${CEPH_USER_SECRET} for namespace ${ns} but continuing anyway (return code: ${RETURN_CODE})"
+            fi
+          else
+            echo "Secret ${CEPH_USER_SECRET} for namespace ${ns} already exists"
+          fi
+        done
+      fi
+    fi
+
+    if [ -n "${USER_ID}" ]; then
+      echo -e "\n================================================="
+      echo "Check if pool is accessible using provided credentials"
+      echo "================================================="
+      timeout --preserve-status 10  rbd -p "${POOL_NAME}" --id "${USER_ID}" ls -K "${CEPH_USER_KEYRING}" &>/dev/null
+      RETURN_CODE=$?
+      if [ ${RETURN_CODE} -eq 0 ]; then
+        echo -e "Pool ${POOL_NAME} is accessible"
+      elif [ ${RETURN_CODE} -eq 143 ]; then
+        echo -e "RBD command timed out. Make sure OSDs have been provisioned."
+      else
+        echo -e "Error: Ceph pool ${POOL_NAME} is not accessible using credentials for user ${USER_ID}. Check Pod logs for details. (return code: ${RETURN_CODE})"
+        exit ${RETURN_CODE}
+      fi
+    fi
+
+    echo -e "\n================================================="
+    echo "ceph -s"
+    echo "================================================="
+    ceph -s
+    RETURN_CODE=$?
+    if [ ${RETURN_CODE} -ne 0 ]; then
+      echo -e "Error: Ceph cluster is not accessible, check Pod logs for details. (return code: ${RETURN_CODE})"
+      exit ${RETURN_CODE}
+    fi
+
+---
+
+apiVersion: batch/v1
+kind: Job
+metadata:
+  name: rbd-storage-init
+  namespace: {{ .Release.Namespace }}
+  labels:
+    app: {{ include "ceph-csi-rbd.name" . }}
+    chart: {{ include "ceph-csi-rbd.chart" . }}
+    component: {{ .Values.provisioner.name }}
+    release: {{ .Release.Name }}
+    heritage: {{ .Release.Service }}
+  annotations:
+    "meta.helm.sh/release-name": {{ .Release.Name }}
+    "meta.helm.sh/release-namespace": {{ .Release.Namespace }}
+    "helm.sh/hook": "post-install, pre-upgrade, pre-rollback"
+    "helm.sh/hook-delete-policy": "before-hook-creation"
+spec:
+  backoffLimit: 5
+  activeDeadlineSeconds: 360
+  template:
+    metadata:
+      name: "{{ .Release.Name }}"
+      namespace: {{ .Release.Namespace }}
+      labels:
+        heritage: {{ .Release.Service | quote }}
+        release: {{ .Release.Name | quote }}
+        chart: "{{ .Chart.Name }}-{{- .Chart.Version }}"
+    spec:
+      serviceAccountName: {{ include "ceph-csi-rbd.serviceAccountName.provisioner" . }}
+      restartPolicy: OnFailure
+      volumes:
+        - name: rbd-storage-init-configmap-volume
+          configMap:
+            name: rbd-storage-init
+      containers:
+        {{- range $sc := .Values.classes }}
+        - name: storage-init-{{- $sc.name }}
+          image: "{{ $.Values.storage_init.image.repository }}:{{ $.Values.storage_init.image.tag }}"
+          command: [ "/bin/bash", "/tmp/storage-init.sh" ]
+          env:
+            - name: NAMESPACE
+              value: {{ $.Release.Namespace }}
+            - name: ADDITIONAL_NAMESPACES
+              value: {{ join "," $sc.additionalNamespaces | quote }}
+            - name: CEPH_ADMIN_SECRET
+              value: {{ $.Values.classdefaults.adminSecretName }}
+            - name: CEPH_USER_SECRET
+              value: {{ $sc.userSecretName }}
+            - name: USER_ID
+              value: {{ $sc.userId }}
+            - name: ADMIN_ID
+              value: {{ $.Values.classdefaults.adminId }}
+            - name: POOL_NAME
+              value: {{ $sc.pool_name }}
+            - name: POOL_REPLICATION
+              value: {{ $sc.replication | quote }}
+            - name: POOL_CRUSH_RULE_NAME
+              value: {{ $sc.crush_rule_name | quote }}
+            - name: POOL_CHUNK_SIZE
+              value: {{ $sc.chunk_size | quote }}
+          volumeMounts:
+            - name: rbd-storage-init-configmap-volume
+              mountPath: /tmp
+        {{- end }}
+{{- if .Values.provisioner.nodeSelector }}
+      nodeSelector:
+{{ .Values.provisioner.nodeSelector | toYaml | trim | indent 8 }}
+{{- end }}
+{{- with .Values.provisioner.tolerations }}
+      tolerations:
+{{ toYaml . | indent 8 }}
+{{- end }}
-- 
2.25.1

